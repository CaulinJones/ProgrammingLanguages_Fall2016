#lang racket

(require "parenthc.rkt")

;;apply-closure cl^ cy ck^
;;apply-env envr^ ey ek^
;;apply-k k^ v

(define value-of-cps
  (lambda (expr^ env-cps k)
    (union-case expr^ expr
      [(const expr)(apply-k k expr)]
      [(mult x1 x2) (value-of-cps x1 env-cps (kt_*-out-k x2 env-cps k))]
      [(sub1 x) (value-of-cps x env-cps (kt_s1-in-k k))]
      [(zero x)(value-of-cps x env-cps (kt_zr-in-k k))]
      [(if test conseq alt)(value-of-cps test env-cps (kt_if-in-k conseq alt env-cps k))]
      [(letcc body)(value-of-cps body (envr_extend-env k env-cps) k)]
      [(throw k-exp e-exp)(value-of-cps k-exp env-cps (kt_thr-out-k e-exp env-cps))]
      [(let e body)(value-of-cps e env-cps (kt_let-in-k body env-cps k))]                                                    
      [(var expr)(apply-env env-cps expr k)]
      [(lambda body)(apply-k k (clos_closure body env-cps))]
      [(app rator rand)(value-of-cps rator env-cps (kt_app-out-k rand env-cps k))]
      )))




(define-union expr
  (const cexp)
  (var n)
  (if test conseq alt)
  (mult nexp1 nexp2)
  (sub1 nexp)
  (zero nexp)
  (letcc body)
  (throw kexp vexp)
  (let exp body)              
  (lambda body)
  (app rator rand))


;; (let ((f (lambda (f)
;;   	      (lambda (n)
;; 	        (if (zero? n) 
;; 		    1
;; 	            (* n ((f f) (sub1 n))))))))
;;   (* (letcc k ((f f) (throw k ((f f) 4)))) 5))
 



(define apply-k
  (lambda (k^ v)
    (union-case k^ kt
      [(empty-k) v]
      [(*-in-k y^ k^)(apply-k k^ (* v y^))]
      [(*-out-k x^ env^ k^)(value-of-cps x^ env^ (kt_*-in-k v k^))]
      [(s1-in-k k^)(apply-k k^ (sub1 v))]
      [(zr-in-k k^)(apply-k k^ (zero? v))]
      [(if-in-k c^ a^ env^ k^)(if v (value-of-cps c^ env^ k^)(value-of-cps a^ env^ k^))]
      [(thr-out-k e^ env^)(value-of-cps e^ env^ (kt_thr-in-k v))]
      [(thr-in-k v^)(apply-k v^ v)]
      [(let-in-k b^ env^ k^)(value-of-cps b^ (envr_extend-env v env^)k^)]
      [(app-in-k c^ k^)(apply-closure c^ v k^)]
      [(app-out-k ran^ env^ k^)(value-of-cps ran^ env^ (kt_app-in-k v k^))]
      )))


(define-union kt
  (empty-k)
  (*-in-k y^ k^)
  (*-out-k x^ env^ k^)
  (s1-in-k k^)
  (zr-in-k k^)
  (if-in-k c^ a^ env^ k^)
  (thr-out-k e^ env^)
  (thr-in-k v^)
  (let-in-k b^ env^ k^)
  (app-in-k c^ k^)
  (app-out-k ran^ env^ k^))

(define apply-env
  (lambda (envr^ ey ek^)
    (union-case envr^ envr
      [(empty-env)(error 'value-of-cps "Unbound Identifier")]
      [(extend-env a^ env^)(if (zero? ey) (apply-k ek^ a^)(apply-env env^ (sub1 ey) ek^))])))
      


(define apply-closure
  (lambda (cl^ cy ck^)
    (union-case cl^ clos
      [(closure body^ env^)(value-of-cps body^ (envr_extend-env cy env^) ck^)])))

(define-union clos
  (closure body^ env^))

(define-union envr
    (empty-env)
    (extend-env a^ env^))
            
(define main 
  (lambda ()
    (value-of-cps 
     (expr_let 
      (expr_lambda
       (expr_lambda 
        (expr_if
         (expr_zero (expr_var 0))
         (expr_const 1)
         (expr_mult (expr_var 0) (expr_app (expr_app (expr_var 1) (expr_var 1)) (expr_sub1 (expr_var 0)))))))
      (expr_mult
       (expr_letcc
        (expr_app
         (expr_app (expr_var 1) (expr_var 1))
         (expr_throw (expr_var 0) (expr_app (expr_app (expr_var 1) (expr_var 1)) (expr_const 4)))))
       (expr_const 5)))
     (envr_empty-env)
     (kt_empty-k))))